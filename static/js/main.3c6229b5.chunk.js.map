{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","results","searchKey","searchTerm","Cookies","get","needsToSearchTopstories","bind","setSearchTopstories","fetchSearchTopstories","onSearchChange","onSearchSubmit","onDismiss","this","setState","result","hits","page","oldHits","updatedHits","fetch","then","response","json","event","target","value","set","path","preventDefault","id","filter","item","objectID","list","className","onChange","onSubmit","onClick","Component","Search","children","type","Table","map","key","style","width","href","url","title","author","num_comments","points","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c6229b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Cookies from 'js-cookie';\n\n\nlet DEFAULT_QUERY = 'redux';\n\nconst DEFAULT_PAGE = 0;\n\nconst DEFAULT_HPP = '100';\n\n\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\n\nconst PATH_SEARCH = '/search';\n\nconst PARAM_SEARCH = 'query=';\n\nconst PARAM_PAGE = 'page=';\n\nconst PARAM_HPP = 'hitsPerPage=';\n\n\n\nclass App extends Component {\n    \n\n\n\n    constructor(props) {\n\n        super(props);\n\n\n\n        this.state = {\n\n            results: null,\n\n            searchKey: '',\n\n            searchTerm: Cookies.get('search') || DEFAULT_QUERY,\n\n        };\n\n\n\n        this.needsToSearchTopstories = this.needsToSearchTopstories.bind(this);\n\n        this.setSearchTopstories = this.setSearchTopstories.bind(this);\n\n        this.fetchSearchTopstories = this.fetchSearchTopstories.bind(this);\n\n        this.onSearchChange = this.onSearchChange.bind(this);\n\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\n\n        this.onDismiss = this.onDismiss.bind(this);\n\n    }\n\n\n\n    componentDidMount() {\n\n\n        const { searchTerm } = this.state;\n        \n        this.setState({ searchKey: searchTerm });\n\n\n        this.fetchSearchTopstories(searchTerm, DEFAULT_PAGE);\n\n    }\n\n\n\n\n    setSearchTopstories(result) {\n\n        const { hits, page } = result;\n\n        const { searchKey, results } = this.state;\n\n\n\n        const oldHits = results && results[searchKey]\n\n        ? results[searchKey].hits\n\n        : [];\n\n\n\n        const updatedHits = [\n\n            ...oldHits,\n\n            ...hits\n\n        ];\n\n\n\n        this.setState({\n\n            results: {\n\n                ...results,\n\n                [searchKey]: { hits: updatedHits, page }\n\n            }\n\n        });\n\n    }\n\n\n\n    fetchSearchTopstories(searchTerm, page) {\n\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n\n            .then(response => response.json())\n\n            .then(result => this.setSearchTopstories(result));\n\n    }\n\n\n\n    needsToSearchTopstories(searchTerm) {\n\n        return !this.state.results[searchTerm];\n\n    }\n\n\n\n    onSearchChange(event) {\n\n        this.setState({ searchTerm: event.target.value });\n\n    }\n\n\n\n    onSearchSubmit(event) {\n\n        const { searchTerm } = this.state;\n\n        this.setState({ searchKey: searchTerm });\n\n\n\n       Cookies.set('search', searchTerm, { path: '/' });\n\n\n        if (this.needsToSearchTopstories(searchTerm)) {\n\n            this.fetchSearchTopstories(searchTerm, DEFAULT_PAGE);\n\n        }\n\n\n\n        event.preventDefault();\n\n    }\n\n\n\n    onDismiss(id) {\n\n        const { searchKey, results } = this.state;\n\n        const { hits, page } = results[searchKey];\n\n\n\n        const isNotId = item => item.objectID !== id;\n\n        const updatedHits = hits.filter(isNotId);\n\n\n\n        this.setState({\n\n            results: {\n\n                ...results,\n\n                [searchKey]: { hits: updatedHits, page }\n\n            }\n\n        });\n\n    }\n\n\n\n    render() {\n\n        let{\n            searchTerm\n        } = this.state;\n        const {\n\n            results,\n\n            searchKey\n\n        } = this.state;\n\n\n\n\n        const page = (\n\n            results &&\n\n            results[searchKey] &&\n\n            results[searchKey].page\n\n        ) || 0;\n\n\n\n        const list = (\n\n            results &&\n\n            results[searchKey] &&\n\n            results[searchKey].hits\n\n        ) || [];\n\n\n\n        return (\n\n\n            <div className=\"page\">\n\n            <div className=\"interactions\">\n\n            <Search\n\n            value={searchTerm}\n\n\n\n\n            onChange={this.onSearchChange}\n\n            onSubmit={this.onSearchSubmit}\n\n            >\n\n            Search\n\n            </Search>\n\n            </div>\n\n            <Table\n\n            list={list}\n\n            onDismiss={this.onDismiss}\n\n            />\n\n            <div className=\"interactions\">\n\n            <Button onClick={() => this.fetchSearchTopstories(searchKey, page + 1)}>\n\n            More\n\n</Button>\n\n</div>\n\n</div>\n\n);\n\n}\n\n}\n\n\n\nconst Search = ({\n\n    value,\n\n    onChange,\n\n    onSubmit,\n\n    children\n\n}) =>\n\n<form onSubmit={onSubmit}>\n\n    <input\n\ntype=\"text\"\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n    <button type=\"submit\">\n\n        {children}\n\n</button>\n\n</form>\n\n\n\nconst Table = ({ list, onDismiss }) =>\n\n<div className=\"table\">\n\n    { list.map(item =>\n\n     <div key={item.objectID} className=\"table-row\">\n\n         <span style={{ width: '40%' }}>\n\n             <a href={item.url}>{item.title}</a>\n\n</span>\n\n<span style={{ width: '30%' }}>\n\n    {item.author}\n\n</span>\n\n<span style={{ width: '10%' }}>\n\n    {item.num_comments}\n\n</span>\n\n<span style={{ width: '10%' }}>\n\n    {item.points}\n\n</span>\n\n<span style={{ width: '10%' }}>\n\n    <Button\n\nonClick={() => onDismiss(item.objectID)}\n\nclassName=\"button-inline\"\n\n>\n\n    Dismiss\n\n</Button>\n\n</span>\n\n</div>\n\n)}\n\n    </div>\n\n\n\nconst Button = ({ onClick, className = '', children }) =>\n\n<button\n\nonClick={onClick}\n\nclassName={className}\n\ntype=\"button\"\n\n>\n\n    {children}\n\n</button>\n\n\n\nexport default App;\nexport {\nButton,\n    Search,\n    Table,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif(module.hot){\n    module.hot.accept();\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}